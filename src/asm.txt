Okay, I should probably put here a list of all the features this assembler should have by the end.

1: Directives. The chasm assembler should have the following directives:
    .origin     Tells the assembler where the code will be executed. Use with an absolute address.
    .define     Defines a symbol. Use with a name and an immediate or address, or another symbol/label
    .byte       Puts a byte in the output binary.
    .word       Puts a word in the output binary.
    .vector     Puts an absolute address in the output binary. Mainly useful for interrupt vectors, and for indirect absolute addressing.
    .ascii      Puts an ASCII string in the output binary.
    .asciiz     Puts a null-terminated ASCII string in the output binary.
    .include    Includes the given assembly file.
    .incbin     Includes the given binary file.

2: Addressing modes. The Cellia architecture has the following addressing modes:
    Register            r     Not an address, just here for completeness.
    Integer Register    ir    Not an address, just here for completeness.
    Immediate           #     Not an address, just here for completeness.
    Absolute            a     24-bit
    Indirect Absolute   (a)   24-bit, reads an absolute address from the given address.
    Zero Bank           zb    16-bit
    Indirect Zero Bank  (zb)  16-bit, reads an absolute address from the given zero bank address.
    Direct Page         dp    8-bit, direct page set using special instruction.
    Port                p     16-bit
    Relative            ipr   16-bit signed, added to the instruction pointer
    Stack Relative      spr   16-bit signed, added to the stack pointer

3: Labels. The chasm assembler should support local labels, which will be differentiated from global labels by an ending $.

4: In-assembly operators. Should be the same list as vasm. So, parentheses, arithmetic and logic operations, etc. In addition:
    Have lo/hi-modifiers (< or >) for 16-bit words.
    Have lo/mid/hi-modifiers (<, |, or >) for 24-bit absolute addresses. Useful for putting an address into memory.

5: Instructions. There are 140 opcodes and 56 instructions at the time of writing. That's a 2.5:1 ratio.
    NOP
    MOV #, r
    MOV a, r
    MOV (a), r
    MOV zb, r
    MOV (zb), r
    MOV dp, r
    MOV p, r
    MOV ipr, r
    MOV spr, r
    MOV r, r
    MOV r, a
    MOV r, (a)
    MOV r, zb
    MOV r, (zb)
    MOV r, dp
    MOV r, p
    MOV r, ipr
    MOV r, spr
    MOVX a, r
    MOVX zb, r
    MOVX dp, r
    MOVX p, r
    MOVX r, a
    MOVX r, zb
    MOVX r, dp
    MOVX r, p
    MOVY a, r
    MOVY zb, r
    MOVY dp, r
    MOVY p, r
    MOVY r, a
    MOVY r, zb
    MOVY r, dp
    MOVY r, p
    HACF
    SETDP #
    SETSB #
    GETSB r
    PUSH r
    PUSHIF
    PULL r
    PULLIF
    ADDI #, ir
    ADDI ir, ir
    ADCI #, ir
    ADCI ir, ir
    NOT r
    SUBI #, ir
    SUBI ir, ir
    SBCI #, ir
    SBCI ir, ir
    AND #, r
    AND r, r
    OR #, r
    OR r, r
    XOR #, r
    XOR r, r
    SHL r
    SHR r
    ROL r
    ROR r
    PCNT r, r
    VCNT r, r
    SET #, r
    SETIF #
    CLR #, r
    CLRIF #
    JMP a
    JMP (a)
    JMP (zb)
    JMP ipr
    JMPX (a)
    JMPX (zb)
    JMPY (a)
    JMPY (zb)
    CALL a
    CMPI #, ir
    CMPI ir, ir
    TEST #, r
    BEQU a
    BEQU (a)
    BEQU (zb)
    BEQU ipr
    BNEQ a
    BNEQ (a)
    BNEQ (zb)
    BNEQ ipr
    BLTU a
    BLTU (a)
    BLTU (zb)
    BLTU ipr
    BLTS a
    BLTS (a)
    BLTS (zb)
    BLTS ipr
    BGTU a
    BGTU (a)
    BGTU (zb)
    BGTU ipr
    BGTS a
    BGTS (a)
    BGTS (zb)
    BGTS ipr
    BLEU a
    BLEU (a)
    BLEU (zb)
    BLEU ipr
    BLES a
    BLES (a)
    BLES (zb)
    BLES ipr
    BGEU a
    BGEU (a)
    BGEU (zb)
    BGEU ipr
    BGES a
    BGES (a)
    BGES (zb)
    BGES ipr
    BCS a
    BCS (a)
    BCS (zb)
    BCS ipr
    BCC a
    BCC (a)
    BCC (zb)
    BCC ipr
    BHCS a
    BHCS (a)
    BHCS (zb)
    BHCS ipr
    BHCC a
    BHCC (a)
    BHCC (zb)
    BHCC ipr